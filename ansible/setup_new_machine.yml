---
- hosts: localhost
  become: false

  # ==============================================
  #       Give Me Fuel Give Me Fire Installation
  # ==============================================

  tasks:
    # ----------------------------------------------
    #                    Git Installation
    # ----------------------------------------------

    - name: Install Git
      homebrew:
        name: git
        state: present
      register: git_installation
      tags: git

    - name: Output Git installation results
      debug:
        var: git_installation.stdout

    # ----------------------------------------------
    #               Oh My Zsh Setup
    # ----------------------------------------------

    - name: Install zsh
      tags: zsh
      homebrew:
        name: zsh
        state: present
      register: zsh_installation

    - name: Output Zsh installation results
      debug:
        var: zsh_installation.stdout

    # ----------------------------------------------

    - name: Install Oh My Zsh
      tags: zsh
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended
      args:
        executable: /bin/zsh
      when: not ansible_env.HOME | regex_search('.*oh-my-zsh.*')
      register: oh_my_zsh_installation

    - name: Output Oh My Zsh installation results
      debug:
        var: oh_my_zsh_installation.stdout

    # ----------------------------------------------
    #              Zsh Plugin Installation
    # ----------------------------------------------

    - name: Clone zsh-autosuggestions plugin
      tags: zsh
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        version: master
      when: not ansible_env.HOME | regex_search('.*zsh-autosuggestions.*') # Check if the plugin is already installed

    - name: Output zsh-autosuggestions installation results
      debug:
        msg: "zsh-autosuggestions plugin cloned to {{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    # ----------------------------------------------

    - name: Clone zsh-syntax-highlighting plugin
      tags: zsh
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        version: master
      when: not ansible_env.HOME | regex_search('.*zsh-syntax-highlighting.*') # Check if the plugin is already installed

    - name: Output zsh-syntax-highlighting installation results
      debug:
        msg: "zsh-syntax-highlighting plugin cloned to {{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

    # ----------------------------------------------
    #               Update .zshrc Configuration
    # ----------------------------------------------

    - name: Ensure zsh plugins are enabled in .zshrc
      tags: zsh
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        regexp: "^plugins="
        line: "plugins=(git zsh-autosuggestions zsh-syntax-highlighting)"
        create: yes

    - name: Output .zshrc configuration results
      debug:
        msg: ".zshrc updated with plugins"

    # ----------------------------------------------
    #            Get .dotfiles from git
    # ----------------------------------------------

    - name: Clone dotfiles repository
      tags: dotfiles
      git:
        repo: https://github.com/dsomleff/dotfiles
        dest: "{{ ansible_env.HOME }}/dotfiles"
        version: main

    - name: Output dotfiles clone results
      debug:
        msg: "Dotfiles cloned to {{ ansible_env.HOME }}/dotfiles"

    # ----------------------------------------------
    #            Replace .zshrc with Custom Version
    # ----------------------------------------------

    - name: Replace .zshrc with custom version
      tags: zshrc
      copy:
        src: "{{ ansible_env.HOME }}/dotfiles/.zshrc" # Path to your custom .zshrc in the cloned repo
        dest: "{{ ansible_env.HOME }}/.zshrc" # Path to the target .zshrc
        remote_src: yes # Indicate that the source file is already on the remote machine
        force: yes # Force replacement even if the file exists

    - name: Output .zshrc replacement results
      debug:
        msg: ".zshrc replaced with custom version"

    # ----------------------------------------------
    #            Install all brew packages
    # ----------------------------------------------

    - name: Run Brew setup script
      tags: brew
      shell: bash dotfiles/setup_macos/setup_brew.sh
      args:
        chdir: "{{ ansible_env.HOME }}" # Set the working directory to the home directory
      register: brew_setup
      ignore_errors: yes # Optional: ignore errors if the script fails for some reason

    - name: Output Brew setup results
      debug:
        var: brew_setup.stdout

    # ----------------------------------------------
    #            Install local scripts
    # ----------------------------------------------

    - name: Run tmux-sessionizer script
      tags: local-scripts
      shell: bash dotfiles/.local/scripts/tmux-sessionizer
      args:
        chdir: "{{ ansible_env.HOME }}" # Set the working directory to the home directory
      register: tmux_sessionizer_script
      ignore_errors: yes # Optional: ignore errors if the script fails for some reason

    - name: Output results of tmux-sessionizer script
      debug:
        var: tmux_sessionizer_script.stdout

    # ----------------------------------------------

    - name: Run update-alacritty-icon script
      tags: local-scripts
      shell: bash dotfiles/.local/scripts/update-alacritty-icon.sh
      args:
        chdir: "{{ ansible_env.HOME }}" # Set the working directory to the home directory
      register: alacritty_icon_script
      ignore_errors: yes # Optional: ignore errors if the script fails for some reason

    - name: Output results of update-alacritty-icon script
      debug:
        var: alacritty_icon_script.stdout

    # ==============================================
    #                Run System Settings Script
    # ==============================================

    - name: Run System settings script
      tags: macos
      shell: bash dotfiles/setup_macos/system_settings.sh
      args:
        chdir: "{{ ansible_env.HOME }}" # Set the working directory to the playbook directory
      register: system_settings_setup

    - name: Output System settings setup results
      debug:
        var: system_settings_setup.stdout
